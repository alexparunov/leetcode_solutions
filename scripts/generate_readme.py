import json
from textwrap import dedent
from pathlib import Path

from scripts.generate_solution_files import get_full_solution_file_path


def generate_readme(total_user_stats, solved_data, file_extension_mapper):
    print(f'Generating Readme...')
    num_solved = total_user_stats['num_solved']
    num_total = total_user_stats['num_total']
    num_solved_easy = total_user_stats['num_solved_easy']
    num_solved_medium = total_user_stats['num_solved_medium']
    num_solved_hard = total_user_stats['num_solved_hard']

    intro = f"""
LeetCode Solutions
==================
NOTE: The content of this Readme file alongside with solution files were autogenerated by [generate_all_files.py](scripts/generate_all_files.py) script.\n   
Solved Questions: {num_solved}/{num_total} - {round(100*num_solved/num_total, 2)}%\n
Easy: {num_solved_easy}/{num_solved} - {round(100*num_solved_easy/num_solved, 2)}%\n
Medium: {num_solved_medium}/{num_solved} - {round(100*num_solved_medium/num_solved, 2)}%\n
Hard: {num_solved_hard}/{num_solved} - {round(100*num_solved_hard/num_solved, 2)}%\n
    """

    with open('../Readme.md', 'w') as f:
        print(f'Writing intro...')
        f.write(dedent(intro))

    head = "| # | Title | Solution | Difficulty |"
    line = "|---|-------|----------|------------|"

    header = head + '\n' + line + '\n'

    table_rows = []
    for prob in solved_data['solved_problems']:
        problem_id = prob['problem_id']
        title = prob['title']
        title_slug = prob['title_slug']
        url = prob['url']
        difficulty = prob['difficulty']

        solution_file_path, _ = get_full_solution_file_path(problem_id, title_slug)
        solution_file_path = solution_file_path[3:]

        file_extension = Path(solution_file_path).suffix
        language = file_extension_mapper[file_extension]

        row = f'|{problem_id}|[{title}]({url})|[{language}]({solution_file_path})|{difficulty}|'
        table_rows.append(row)

    table_rows_data = '\n'.join(table_rows)

    table_rows_data = header + table_rows_data

    with open('../Readme.md', 'a') as f:
        print(f'Writing Table')
        f.write(dedent(table_rows_data))


def main():
    print(f'\n\nRunning generate_readme.py...')
    with open('../data/total_user_stats.json', 'r') as f:
        total_user_stats = json.load(f)

    with open('../data/solved_data.json', 'r') as f:
        solved_data = json.load(f)

    file_extension_mapper = {'.py': 'Python3'}

    generate_readme(total_user_stats, solved_data, file_extension_mapper)


if __name__ == '__main__':
    main()
